"""
Given a tuple-to-scalar function that should be used to generate the output of
a `@mutate` operation, iterate over the elements of a tuple iterator to
produce the individual scalar values generated by the tuple-to-scalar function.
Store each of these values in the passed-in NullableVector.

Note that this function automatically applies the "natural" lifting semantics,
in which an expression over nullables produces a null value if any of the
inputs are null-valued. Another function will need to written to handle the
more complicated case in which only some sub-expressions are lifted and others
must be evaluated using custom lifting semantics.

* TODO: Parallelize this when threading is available in Base Julia.
* TODO: See if using `@inbounds` improves performance.
"""
@noinline function apply_mutate_func!(
    output::NullableVector,
    f::Any,
    tuple_iterator::Any,
)::Void
    # Iterate over all of the rows of the tuple iterator.
    for (i, tpl) in enumerate(tuple_iterator)
        # Apply default lifting semantics by branching on hasnull(tpl).
        if hasnulls(tpl)
            output.isnull[i] = true
        else
            output.isnull[i] = false
            output.values[i] = f(map(unwrap, tpl))
        end
    end
    return
end
